////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : IO_Processor.vf
// /___/   /\     Timestamp : 11/11/2017 20:28:56
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/SVN Output/Processor_Project/ipcore_dir" -intstyle ise -family spartan3e -verilog "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/SVN Output/Processor_Project/IO_Processor.vf" -w "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/SVN Output/Processor_Project/IO_Processor.sch"
//Design Name: IO_Processor
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module debouncer_MUSER_IO_Processor(button, 
                                    clk, 
                                    reset, 
                                    button_hi, 
                                    button_lo, 
                                    count, 
                                    debutton);

    input button;
    input clk;
    input reset;
   output button_hi;
   output button_lo;
   output [15:0] count;
   output debutton;
   
   wire XLXN_101;
   wire XLXN_152;
   wire XLXN_205;
   wire XLXN_219;
   wire XLXN_251;
   wire XLXN_265;
   wire XLXN_266;
   wire XLXN_268;
   wire debutton_DUMMY;
   wire button_lo_DUMMY;
   wire button_hi_DUMMY;
   
   assign button_hi = button_hi_DUMMY;
   assign button_lo = button_lo_DUMMY;
   assign debutton = debutton_DUMMY;
   AND2B1  XLXI_13 (.I0(debutton_DUMMY), 
                   .I1(XLXN_219), 
                   .O(XLXN_205));
   FDC #( .INIT(1'b0) ) XLXI_22 (.C(clk), 
                .CLR(reset), 
                .D(button), 
                .Q(XLXN_219));
   XOR2  XLXI_45 (.I0(XLXN_219), 
                 .I1(debutton_DUMMY), 
                 .O(XLXN_101));
   FDCE #( .INIT(1'b0) ) XLXI_50 (.C(clk), 
                 .CE(XLXN_268), 
                 .CLR(reset), 
                 .D(XLXN_219), 
                 .Q(debutton_DUMMY));
   XOR2  XLXI_53 (.I0(button), 
                 .I1(XLXN_219), 
                 .O(XLXN_152));
   AND2B1  XLXI_65 (.I0(XLXN_219), 
                   .I1(debutton_DUMMY), 
                   .O(XLXN_251));
   FDCE #( .INIT(1'b0) ) XLXI_80 (.C(clk), 
                 .CE(XLXN_265), 
                 .CLR(reset), 
                 .D(XLXN_205), 
                 .Q(button_hi_DUMMY));
   FDCE #( .INIT(1'b0) ) XLXI_81 (.C(clk), 
                 .CE(XLXN_266), 
                 .CLR(reset), 
                 .D(XLXN_251), 
                 .Q(button_lo_DUMMY));
   OR2  XLXI_82 (.I0(button_hi_DUMMY), 
                .I1(XLXN_268), 
                .O(XLXN_265));
   OR2  XLXI_83 (.I0(XLXN_268), 
                .I1(button_lo_DUMMY), 
                .O(XLXN_266));
   debounce_counter  XLXI_85 (.ce(XLXN_101), 
                             .clk(clk), 
                             .sclr(XLXN_152), 
                             .q(count[15:0]), 
                             .thresh0(XLXN_268));
endmodule
`timescale 1ns / 1ps

module M2_1_MXILINX_IO_Processor(D0, 
                                 D1, 
                                 S0, 
                                 O);

    input D0;
    input D1;
    input S0;
   output O;
   
   wire M0;
   wire M1;
   
   AND2B1  I_36_7 (.I0(S0), 
                  .I1(D0), 
                  .O(M0));
   OR2  I_36_8 (.I0(M1), 
               .I1(M0), 
               .O(O));
   AND2  I_36_9 (.I0(D1), 
                .I1(S0), 
                .O(M1));
endmodule
`timescale 1ns / 1ps

module shift4_MUSER_IO_Processor(CLK, 
                                 count, 
                                 enable, 
                                 RESET, 
                                 up, 
                                 sel0, 
                                 sel1, 
                                 sel2, 
                                 sel3);

    input CLK;
    input count;
    input enable;
    input RESET;
    input up;
   output sel0;
   output sel1;
   output sel2;
   output sel3;
   
   wire isel0;
   wire isel1;
   wire isel2;
   wire isel3;
   wire XLXN_30;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   
   FDCPE #( .INIT(1'b0) ) XLXI_6 (.C(CLK), 
                 .CE(count), 
                 .CLR(XLXN_30), 
                 .D(XLXN_76), 
                 .PRE(RESET), 
                 .Q(isel0));
   FDCPE #( .INIT(1'b0) ) XLXI_13 (.C(CLK), 
                  .CE(count), 
                  .CLR(RESET), 
                  .D(XLXN_77), 
                  .PRE(XLXN_30), 
                  .Q(isel1));
   FDCPE #( .INIT(1'b0) ) XLXI_14 (.C(CLK), 
                  .CE(count), 
                  .CLR(RESET), 
                  .D(XLXN_78), 
                  .PRE(XLXN_30), 
                  .Q(isel2));
   FDCPE #( .INIT(1'b0) ) XLXI_15 (.C(CLK), 
                  .CE(count), 
                  .CLR(RESET), 
                  .D(XLXN_79), 
                  .PRE(XLXN_30), 
                  .Q(isel3));
   (* HU_SET = "XLXI_21_31" *) 
   M2_1_MXILINX_IO_Processor  XLXI_21 (.D0(isel1), 
                                      .D1(isel3), 
                                      .S0(up), 
                                      .O(XLXN_76));
   (* HU_SET = "XLXI_56_28" *) 
   M2_1_MXILINX_IO_Processor  XLXI_56 (.D0(isel2), 
                                      .D1(isel0), 
                                      .S0(up), 
                                      .O(XLXN_77));
   (* HU_SET = "XLXI_57_29" *) 
   M2_1_MXILINX_IO_Processor  XLXI_57 (.D0(isel3), 
                                      .D1(isel1), 
                                      .S0(up), 
                                      .O(XLXN_78));
   (* HU_SET = "XLXI_58_30" *) 
   M2_1_MXILINX_IO_Processor  XLXI_58 (.D0(isel0), 
                                      .D1(isel2), 
                                      .S0(up), 
                                      .O(XLXN_79));
   AND2  XLXI_64 (.I0(isel0), 
                 .I1(enable), 
                 .O(sel0));
   AND2  XLXI_65 (.I0(isel1), 
                 .I1(enable), 
                 .O(sel1));
   AND2  XLXI_66 (.I0(isel2), 
                 .I1(enable), 
                 .O(sel2));
   AND2  XLXI_67 (.I0(isel3), 
                 .I1(enable), 
                 .O(sel3));
   GND  XLXI_73 (.G(XLXN_30));
endmodule
`timescale 1ns / 1ps

module RotaryInputControl_MUSER_IO_Processor(Clk, 
                                             count, 
                                             count_up, 
                                             RESET, 
                                             Shift, 
                                             Shift_up, 
                                             A);

    input Clk;
    input count;
    input count_up;
    input RESET;
    input Shift;
    input Shift_up;
   output [15:0] A;
   
   wire XLXN_28;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   
   shift4_MUSER_IO_Processor  XLXI_1 (.CLK(Clk), 
                                     .count(Shift), 
                                     .enable(count), 
                                     .RESET(RESET), 
                                     .up(Shift_up), 
                                     .sel0(XLXN_28), 
                                     .sel1(XLXN_42), 
                                     .sel2(XLXN_43), 
                                     .sel3(XLXN_44));
   IOcounter4  XLXI_17 (.ce(XLXN_28), 
                       .clk(Clk), 
                       .sclr(RESET), 
                       .up(count_up), 
                       .q(A[15:12]));
   IOcounter4  XLXI_18 (.ce(XLXN_42), 
                       .clk(Clk), 
                       .sclr(RESET), 
                       .up(count_up), 
                       .q(A[11:8]));
   IOcounter4  XLXI_19 (.ce(XLXN_43), 
                       .clk(Clk), 
                       .sclr(RESET), 
                       .up(count_up), 
                       .q(A[7:4]));
   IOcounter4  XLXI_22 (.ce(XLXN_44), 
                       .clk(Clk), 
                       .sclr(RESET), 
                       .up(count_up), 
                       .q(A[3:0]));
endmodule
`timescale 1ns / 1ps

module debounceRotary_MUSER_IO_Processor(A, 
                                         B, 
                                         CLK, 
                                         RESET, 
                                         rot_event, 
                                         rot_event_delay, 
                                         rot_left);

    input A;
    input B;
    input CLK;
    input RESET;
   output rot_event;
   output rot_event_delay;
   output rot_left;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_8;
   wire XLXN_17;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_29;
   wire XLXN_43;
   wire XLXN_47;
   wire rot_event_DUMMY;
   
   assign rot_event = rot_event_DUMMY;
   AND2  XLXI_9 (.I0(B), 
                .I1(A), 
                .O(XLXN_1));
   AND2  XLXI_10 (.I0(XLXN_3), 
                 .I1(XLXN_2), 
                 .O(XLXN_4));
   OR2  XLXI_13 (.I0(XLXN_1), 
                .I1(XLXN_17), 
                .O(XLXN_2));
   OR2  XLXI_14 (.I0(B), 
                .I1(A), 
                .O(XLXN_3));
   FDC #( .INIT(1'b0) ) XLXI_21 (.C(CLK), 
                .CLR(RESET), 
                .D(XLXN_4), 
                .Q(XLXN_17));
   FDC #( .INIT(1'b0) ) XLXI_22 (.C(CLK), 
                .CLR(RESET), 
                .D(XLXN_17), 
                .Q(XLXN_8));
   FDC #( .INIT(1'b0) ) XLXI_23 (.C(CLK), 
                .CLR(RESET), 
                .D(XLXN_47), 
                .Q(rot_event_DUMMY));
   FDCE #( .INIT(1'b0) ) XLXI_25 (.C(CLK), 
                 .CE(XLXN_47), 
                 .CLR(RESET), 
                 .D(XLXN_43), 
                 .Q(rot_left));
   AND2B1  XLXI_26 (.I0(XLXN_8), 
                   .I1(XLXN_17), 
                   .O(XLXN_47));
   AND2  XLXI_45 (.I0(B), 
                 .I1(XLXN_29), 
                 .O(XLXN_23));
   OR2  XLXI_46 (.I0(XLXN_23), 
                .I1(XLXN_43), 
                .O(XLXN_24));
   OR2  XLXI_47 (.I0(B), 
                .I1(XLXN_29), 
                .O(XLXN_25));
   AND2  XLXI_48 (.I0(XLXN_25), 
                 .I1(XLXN_24), 
                 .O(XLXN_26));
   FDC #( .INIT(1'b0) ) XLXI_49 (.C(CLK), 
                .CLR(RESET), 
                .D(XLXN_26), 
                .Q(XLXN_43));
   INV  XLXI_69 (.I(A), 
                .O(XLXN_29));
   FDC #( .INIT(1'b0) ) XLXI_70 (.C(CLK), 
                .CLR(RESET), 
                .D(rot_event_DUMMY), 
                .Q(rot_event_delay));
endmodule
`timescale 1ns / 1ps

module Append_Buffer_MUSER_IO_Processor(Lower_12_Imm, 
                                        Upper_4_PC, 
                                        Append_Out);

    input [11:0] Lower_12_Imm;
    input [3:0] Upper_4_PC;
   output [15:0] Append_Out;
   
   
   BUF  XLXI_85 (.I(Lower_12_Imm[4]), 
                .O(Append_Out[4]));
   BUF  XLXI_86 (.I(Lower_12_Imm[3]), 
                .O(Append_Out[3]));
   BUF  XLXI_87 (.I(Lower_12_Imm[2]), 
                .O(Append_Out[2]));
   BUF  XLXI_88 (.I(Lower_12_Imm[1]), 
                .O(Append_Out[1]));
   BUF  XLXI_89 (.I(Lower_12_Imm[0]), 
                .O(Append_Out[0]));
   BUF  XLXI_91 (.I(Upper_4_PC[3]), 
                .O(Append_Out[15]));
   BUF  XLXI_92 (.I(Upper_4_PC[2]), 
                .O(Append_Out[14]));
   BUF  XLXI_93 (.I(Upper_4_PC[1]), 
                .O(Append_Out[13]));
   BUF  XLXI_94 (.I(Upper_4_PC[0]), 
                .O(Append_Out[12]));
   BUF  XLXI_95 (.I(Lower_12_Imm[11]), 
                .O(Append_Out[11]));
   BUF  XLXI_96 (.I(Lower_12_Imm[10]), 
                .O(Append_Out[10]));
   BUF  XLXI_97 (.I(Lower_12_Imm[9]), 
                .O(Append_Out[9]));
   BUF  XLXI_98 (.I(Lower_12_Imm[8]), 
                .O(Append_Out[8]));
   BUF  XLXI_99 (.I(Lower_12_Imm[7]), 
                .O(Append_Out[7]));
   BUF  XLXI_100 (.I(Lower_12_Imm[6]), 
                 .O(Append_Out[6]));
   BUF  XLXI_101 (.I(Lower_12_Imm[5]), 
                 .O(Append_Out[5]));
endmodule
`timescale 1ns / 1ps

module FD16RE_MXILINX_IO_Processor(C, 
                                   CE, 
                                   D, 
                                   R, 
                                   Q);

    input C;
    input CE;
    input [15:0] D;
    input R;
   output [15:0] Q;
   
   
   FDRE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .D(D[0]), 
              .R(R), 
              .Q(Q[0]));
   FDRE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .D(D[1]), 
              .R(R), 
              .Q(Q[1]));
   FDRE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .D(D[2]), 
              .R(R), 
              .Q(Q[2]));
   FDRE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .D(D[3]), 
              .R(R), 
              .Q(Q[3]));
   FDRE #( .INIT(1'b0) ) I_Q4 (.C(C), 
              .CE(CE), 
              .D(D[4]), 
              .R(R), 
              .Q(Q[4]));
   FDRE #( .INIT(1'b0) ) I_Q5 (.C(C), 
              .CE(CE), 
              .D(D[5]), 
              .R(R), 
              .Q(Q[5]));
   FDRE #( .INIT(1'b0) ) I_Q6 (.C(C), 
              .CE(CE), 
              .D(D[6]), 
              .R(R), 
              .Q(Q[6]));
   FDRE #( .INIT(1'b0) ) I_Q7 (.C(C), 
              .CE(CE), 
              .D(D[7]), 
              .R(R), 
              .Q(Q[7]));
   FDRE #( .INIT(1'b0) ) I_Q8 (.C(C), 
              .CE(CE), 
              .D(D[8]), 
              .R(R), 
              .Q(Q[8]));
   FDRE #( .INIT(1'b0) ) I_Q9 (.C(C), 
              .CE(CE), 
              .D(D[9]), 
              .R(R), 
              .Q(Q[9]));
   FDRE #( .INIT(1'b0) ) I_Q10 (.C(C), 
               .CE(CE), 
               .D(D[10]), 
               .R(R), 
               .Q(Q[10]));
   FDRE #( .INIT(1'b0) ) I_Q11 (.C(C), 
               .CE(CE), 
               .D(D[11]), 
               .R(R), 
               .Q(Q[11]));
   FDRE #( .INIT(1'b0) ) I_Q12 (.C(C), 
               .CE(CE), 
               .D(D[12]), 
               .R(R), 
               .Q(Q[12]));
   FDRE #( .INIT(1'b0) ) I_Q13 (.C(C), 
               .CE(CE), 
               .D(D[13]), 
               .R(R), 
               .Q(Q[13]));
   FDRE #( .INIT(1'b0) ) I_Q14 (.C(C), 
               .CE(CE), 
               .D(D[14]), 
               .R(R), 
               .Q(Q[14]));
   FDRE #( .INIT(1'b0) ) I_Q15 (.C(C), 
               .CE(CE), 
               .D(D[15]), 
               .R(R), 
               .Q(Q[15]));
endmodule
`timescale 1ns / 1ps

module Final_Processor_MUSER_IO_Processor(Clock, 
                                          Input_Data, 
                                          Reset, 
                                          isZero, 
                                          Output_Data);

    input Clock;
    input [15:0] Input_Data;
    input Reset;
   output isZero;
   output [15:0] Output_Data;
   
   wire [15:0] A;
   wire [15:0] Acc_Out;
   wire [2:0] ALUctrl;
   wire ALUwrite;
   wire [15:0] ALU_Out;
   wire [15:0] ALU_output;
   wire [15:0] append;
   wire Asel;
   wire Awrite;
   wire [15:0] B;
   wire Bsel;
   wire Bwrite;
   wire [1:0] destAddr;
   wire [2:0] destData;
   wire inDataWrite;
   wire [1:0] IorM;
   wire [15:0] IorM_out;
   wire [15:0] IR;
   wire IRwrite;
   wire [15:0] IR_Reg_Out;
   wire [15:0] isZeroData;
   wire isZeroWrite;
   wire ItypeSel;
   wire [1:0] jControl;
   wire [15:0] Jump_ZE;
   wire [15:0] memRead;
   wire MemWrite;
   wire Mwrite;
   wire [15:0] M_out;
   wire [15:0] PCData;
   wire PCwrite;
   wire [15:0] PC_Out;
   wire [15:0] PC_Plus_4;
   wire RegWrite;
   wire [15:0] r_out;
   wire [3:0] write_address;
   wire [15:0] XLXN_56;
   wire [15:0] XLXN_101;
   wire [15:0] XLXN_130;
   wire [15:0] XLXN_131;
   wire [3:0] XLXN_147;
   wire [15:0] XLXN_152;
   wire [15:0] XLXN_156;
   wire [3:0] XLXN_169;
   wire [15:0] XLXN_177;
   wire [15:0] XLXN_188;
   wire XLXN_332;
   wire [15:0] XLXN_333;
   wire [15:0] XLXN_346;
   wire [15:0] XLXN_354;
   wire isZero_DUMMY;
   
   assign XLXN_147 = 4'hF;
   assign XLXN_169 = 4'h2;
   assign XLXN_188 = 16'h0001;
   assign isZero = isZero_DUMMY;
   ALU_16bit  ALU (.a(A[15:0]), 
                  .ALUctrl(ALUctrl[2:0]), 
                  .b(B[15:0]), 
                  .ALUOut(ALU_output[15:0]), 
                  .iszero(isZero_DUMMY), 
                  .Overflow());
   (* HU_SET = "B_Reg_32" *) 
   FD16RE_MXILINX_IO_Processor  B_Reg (.C(Clock), 
                                      .CE(Bwrite), 
                                      .D(XLXN_131[15:0]), 
                                      .R(Reset), 
                                      .Q(B[15:0]));
   Control_Unit  Control (.acc15(Acc_Out[15]), 
                         .CLK(Clock), 
                         .Func(IR[7:5]), 
                         .noOp(XLXN_332), 
                         .Opcode(IR[15:12]), 
                         .Reset(Reset), 
                         .toaccIn(IR[0]), 
                         .ALUCtrl(ALUctrl[2:0]), 
                         .ALUWrite(ALUwrite), 
                         .Asel(Asel), 
                         .Awrite(Awrite), 
                         .Bsel(Bsel), 
                         .Bwrite(Bwrite), 
                         .destAdr(destAddr[1:0]), 
                         .destData(destData[2:0]), 
                         .inDataWrite(inDataWrite), 
                         .IorM(IorM[1:0]), 
                         .IRWrite(IRwrite), 
                         .IsZeroWrite(isZeroWrite), 
                         .ItypeSel(ItypeSel), 
                         .Jcontrol(jControl[1:0]), 
                         .MemWrite(MemWrite), 
                         .MWrite(Mwrite), 
                         .PCWrite(PCwrite), 
                         .RegWrite(RegWrite));
   Mux_16bit_2i_1o  Irmux (.a(IR_Reg_Out[15:0]), 
                          .b(memRead[15:0]), 
                          .s(IRwrite), 
                          .r(IR[15:0]));
   Mux_16bit_2i_1o  ItypeSel_Mux (.a(XLXN_56[15:0]), 
                                 .b(XLXN_333[15:0]), 
                                 .s(ItypeSel), 
                                 .r(r_out[15:0]));
   (* HU_SET = "PC_Reg_37" *) 
   FD16RE_MXILINX_IO_Processor  PC_Reg (.C(Clock), 
                                       .CE(PCwrite), 
                                       .D(PCData[15:0]), 
                                       .R(Reset), 
                                       .Q(PC_Out[15:0]));
   ZeroExtend_12bit  XLXI_4 (.a(IR[11:0]), 
                            .r(XLXN_56[15:0]));
   Mux_16bit_2i_1o  XLXI_7 (.a(XLXN_354[15:0]), 
                           .b(r_out[15:0]), 
                           .s(Bsel), 
                           .r(XLXN_131[15:0]));
   Mux_16bit_2i_1o  XLXI_8 (.a(XLXN_101[15:0]), 
                           .b(Acc_Out[15:0]), 
                           .s(Asel), 
                           .r(XLXN_130[15:0]));
   (* HU_SET = "XLXI_10_33" *) 
   FD16RE_MXILINX_IO_Processor  XLXI_10 (.C(Clock), 
                                        .CE(Awrite), 
                                        .D(XLXN_130[15:0]), 
                                        .R(Reset), 
                                        .Q(A[15:0]));
   (* HU_SET = "XLXI_13_34" *) 
   FD16RE_MXILINX_IO_Processor  XLXI_13 (.C(Clock), 
                                        .CE(IRwrite), 
                                        .D(memRead[15:0]), 
                                        .R(Reset), 
                                        .Q(IR_Reg_Out[15:0]));
   SignExtend_12bit  XLXI_29 (.a(IR[11:0]), 
                             .r(XLXN_333[15:0]));
   SignExtend_8bit  XLXI_30 (.a(IR[7:0]), 
                            .r(XLXN_101[15:0]));
   (* HU_SET = "XLXI_58_36" *) 
   FD16RE_MXILINX_IO_Processor  XLXI_58 (.C(Clock), 
                                        .CE(ALUwrite), 
                                        .D(ALU_output[15:0]), 
                                        .R(Reset), 
                                        .Q(ALU_Out[15:0]));
   LeftShift_4  XLXI_63 (.a(XLXN_156[15:0]), 
                        .r(XLXN_152[15:0]));
   ZeroExtend_4bit  XLXI_64 (.a(IR_Reg_Out[11:8]), 
                            .r(XLXN_156[15:0]));
   (* HU_SET = "XLXI_65_35" *) 
   FD16RE_MXILINX_IO_Processor  XLXI_65 (.C(Clock), 
                                        .CE(Mwrite), 
                                        .D(memRead[15:0]), 
                                        .R(Reset), 
                                        .Q(M_out[15:0]));
   Mux_16bit_4i_1o  XLXI_66 (.a(PC_Plus_4[15:0]), 
                            .b(XLXN_177[15:0]), 
                            .c(append[15:0]), 
                            .d(ALU_Out[15:0]), 
                            .s(jControl[1:0]), 
                            .r(PCData[15:0]));
   Mux_4bit_3i_1o  XLXI_67 (.a(IR_Reg_Out[11:8]), 
                           .b(XLXN_147[3:0]), 
                           .c(XLXN_169[3:0]), 
                           .s(destAddr[1:0]), 
                           .r(write_address[3:0]));
   Adder_16  XLXI_69 (.a(PC_Out[15:0]), 
                     .b(r_out[15:0]), 
                     .r(XLXN_177[15:0]));
   Adder_16  XLXI_70 (.a(XLXN_188[15:0]), 
                     .b(PC_Out[15:0]), 
                     .r(PC_Plus_4[15:0]));
   Append_Buffer_MUSER_IO_Processor  XLXI_82 (.Lower_12_Imm(Jump_ZE[11:0]), 
                                             .Upper_4_PC(PC_Plus_4[15:12]), 
                                             .Append_Out(append[15:0]));
   Mux_16bit_6i_1o  XLXI_91 (.a(ALU_Out[15:0]), 
                            .b(XLXN_152[15:0]), 
                            .c(B[15:0]), 
                            .d(A[15:0]), 
                            .e(M_out[15:0]), 
                            .f(PC_Plus_4[15:0]), 
                            .s(destData[2:0]), 
                            .r(XLXN_346[15:0]));
   check_noOp  XLXI_127 (.IR(IR[15:0]), 
                        .noOp(XLXN_332));
   ZeroExtend_12bit  XLXI_135 (.a(IR_Reg_Out[11:0]), 
                              .r(Jump_ZE[15:0]));
   dualportMem  XLXI_136 (.addra(ALU_Out[7:0]), 
                         .addrb(IorM_out[7:0]), 
                         .clka(Clock), 
                         .clkb(Clock), 
                         .dina(A[15:0]), 
                         .wea(MemWrite), 
                         .doutb(memRead[15:0]));
   Reg_File  XLXI_137 (.clock(Clock), 
                      .in_data(Input_Data[15:0]), 
                      .in_data_write(inDataWrite), 
                      .iszero_data(isZeroData[15:0]), 
                      .iszero_write(isZeroWrite), 
                      .ra(IR[11:8]), 
                      .reg_write(RegWrite), 
                      .wa(write_address[3:0]), 
                      .write_data(XLXN_346[15:0]), 
                      .acc_data(Acc_Out[15:0]), 
                      .out_data(Output_Data[15:0]), 
                      .read_data(XLXN_354[15:0]));
   Mux_16bit_3i_1o  XLXI_138 (.a(PC_Out[15:0]), 
                             .b(ALU_Out[15:0]), 
                             .c(PCData[15:0]), 
                             .s(IorM[1:0]), 
                             .r(IorM_out[15:0]));
   SignExtend_1Bit  XLXI_139 (.a(isZero_DUMMY), 
                             .r(isZeroData[15:0]));
endmodule
`timescale 1ns / 1ps

module IO_Processor(a_button, 
                    b_button, 
                    Clock, 
                    Resetbtn, 
                    Rot_btn, 
                    switch1, 
                    a, 
                    b, 
                    c, 
                    d, 
                    e, 
                    led0, 
                    rs, 
                    rw, 
                    sf_e);

    input a_button;
    input b_button;
    input Clock;
    input Resetbtn;
    input Rot_btn;
    input switch1;
   output a;
   output b;
   output c;
   output d;
   output e;
   output led0;
   output rs;
   output rw;
   output sf_e;
   
   wire [15:0] Input;
   wire Reset_Out;
   wire shift_up;
   wire [15:0] XLXN_24;
   wire [3:0] XLXN_25;
   wire [3:0] XLXN_26;
   wire [3:0] XLXN_27;
   wire [3:0] XLXN_28;
   wire [3:0] XLXN_29;
   wire [3:0] XLXN_30;
   wire [3:0] XLXN_31;
   wire [3:0] XLXN_32;
   wire XLXN_39;
   wire [3:0] XLXN_40;
   wire [3:0] XLXN_41;
   wire [3:0] XLXN_42;
   wire [3:0] XLXN_43;
   wire [3:0] XLXN_44;
   wire [3:0] XLXN_45;
   wire [3:0] XLXN_46;
   wire [3:0] XLXN_47;
   wire XLXN_80;
   wire XLXN_96;
   wire XLXN_98;
   wire XLXN_108;
   wire XLXN_121;
   wire XLXN_122;
   wire led0_DUMMY;
   
   assign led0 = led0_DUMMY;
   Test_LCD  XLXI_2 (.byte1_low(XLXN_25[3:0]), 
                    .byte1_up(XLXN_26[3:0]), 
                    .byte2_low(XLXN_27[3:0]), 
                    .byte2_up(XLXN_28[3:0]), 
                    .byte3_low(XLXN_29[3:0]), 
                    .byte3_up(XLXN_30[3:0]), 
                    .byte4_low(XLXN_31[3:0]), 
                    .byte4_up(XLXN_32[3:0]), 
                    .byte5_low(XLXN_40[3:0]), 
                    .byte5_up(XLXN_41[3:0]), 
                    .byte6_low(XLXN_42[3:0]), 
                    .byte6_up(XLXN_43[3:0]), 
                    .byte7_low(XLXN_44[3:0]), 
                    .byte7_up(XLXN_45[3:0]), 
                    .byte8_low(XLXN_46[3:0]), 
                    .byte8_up(XLXN_47[3:0]), 
                    .clk(Clock), 
                    .a(a), 
                    .b(b), 
                    .c(c), 
                    .d(d), 
                    .e(e), 
                    .rs(rs), 
                    .rw(rw), 
                    .sf_e(sf_e));
   LCD_Decoder  XLXI_13 (.data_in(Input[15:0]), 
                        .data_out(XLXN_24[15:0]), 
                        .byte1_low(XLXN_25[3:0]), 
                        .byte1_up(XLXN_26[3:0]), 
                        .byte2_low(XLXN_27[3:0]), 
                        .byte2_up(XLXN_28[3:0]), 
                        .byte3_low(XLXN_29[3:0]), 
                        .byte3_up(XLXN_30[3:0]), 
                        .byte4_low(XLXN_31[3:0]), 
                        .byte4_up(XLXN_32[3:0]), 
                        .byte5_low(XLXN_40[3:0]), 
                        .byte5_up(XLXN_41[3:0]), 
                        .byte6_low(XLXN_42[3:0]), 
                        .byte6_up(XLXN_43[3:0]), 
                        .byte7_low(XLXN_44[3:0]), 
                        .byte7_up(XLXN_45[3:0]), 
                        .byte8_low(XLXN_46[3:0]), 
                        .byte8_up(XLXN_47[3:0]));
   Final_Processor_MUSER_IO_Processor  XLXI_18 (.Clock(Clock), 
                                               .Input_Data(Input[15:0]), 
                                               .Reset(XLXN_108), 
                                               .Output_Data(XLXN_24[15:0]));
   debouncer_MUSER_IO_Processor  XLXI_19 (.button(Resetbtn), 
                                         .clk(Clock), 
                                         .reset(XLXN_39), 
                                         .button_hi(Reset_Out), 
                                         .button_lo(), 
                                         .debutton());
   GND  XLXI_20 (.G(XLXN_39));
   debounceRotary_MUSER_IO_Processor  XLXI_21 (.A(a_button), 
                                              .B(b_button), 
                                              .CLK(Clock), 
                                              .RESET(XLXN_80), 
                                              .rot_event(XLXN_122), 
                                              .rot_event_delay(), 
                                              .rot_left(XLXN_121));
   GND  XLXI_30 (.G(XLXN_80));
   RotaryInputControl_MUSER_IO_Processor  XLXI_31 (.Clk(Clock), 
                                                  .count(XLXN_122), 
                                                  .count_up(XLXN_121), 
                                                  .RESET(Reset_Out), 
                                                  .Shift(XLXN_96), 
                                                  .Shift_up(shift_up), 
                                                  .A(Input[15:0]));
   BUF  XLXI_32 (.I(switch1), 
                .O(led0_DUMMY));
   INV  XLXI_33 (.I(led0_DUMMY), 
                .O(shift_up));
   debouncer_MUSER_IO_Processor  XLXI_36 (.button(Rot_btn), 
                                         .clk(Clock), 
                                         .reset(XLXN_98), 
                                         .button_hi(XLXN_96), 
                                         .button_lo(), 
                                         .debutton());
   GND  XLXI_37 (.G(XLXN_98));
   OR2  XLXI_41 (.I0(XLXN_122), 
                .I1(Reset_Out), 
                .O(XLXN_108));
endmodule
