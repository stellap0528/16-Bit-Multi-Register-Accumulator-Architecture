////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Processor_Integration_4.vf
// /___/   /\     Timestamp : 10/31/2017 21:42:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/Final Project SVN/Processor_Project/ipcore_dir" -intstyle ise -family spartan3e -verilog "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/Final Project SVN/Processor_Project/Processor_Integration_4.vf" -w "C:/Users/johnsor2/Documents/College/Junior/Q1/Comp Arch I/Final Project SVN/Processor_Project/Processor_Integration_4.sch"
//Design Name: Processor_Integration_4
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module FD16RE_MXILINX_Processor_Integration_4(C, 
                                              CE, 
                                              D, 
                                              R, 
                                              Q);

    input C;
    input CE;
    input [15:0] D;
    input R;
   output [15:0] Q;
   
   
   FDRE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .D(D[0]), 
              .R(R), 
              .Q(Q[0]));
   FDRE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .D(D[1]), 
              .R(R), 
              .Q(Q[1]));
   FDRE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .D(D[2]), 
              .R(R), 
              .Q(Q[2]));
   FDRE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .D(D[3]), 
              .R(R), 
              .Q(Q[3]));
   FDRE #( .INIT(1'b0) ) I_Q4 (.C(C), 
              .CE(CE), 
              .D(D[4]), 
              .R(R), 
              .Q(Q[4]));
   FDRE #( .INIT(1'b0) ) I_Q5 (.C(C), 
              .CE(CE), 
              .D(D[5]), 
              .R(R), 
              .Q(Q[5]));
   FDRE #( .INIT(1'b0) ) I_Q6 (.C(C), 
              .CE(CE), 
              .D(D[6]), 
              .R(R), 
              .Q(Q[6]));
   FDRE #( .INIT(1'b0) ) I_Q7 (.C(C), 
              .CE(CE), 
              .D(D[7]), 
              .R(R), 
              .Q(Q[7]));
   FDRE #( .INIT(1'b0) ) I_Q8 (.C(C), 
              .CE(CE), 
              .D(D[8]), 
              .R(R), 
              .Q(Q[8]));
   FDRE #( .INIT(1'b0) ) I_Q9 (.C(C), 
              .CE(CE), 
              .D(D[9]), 
              .R(R), 
              .Q(Q[9]));
   FDRE #( .INIT(1'b0) ) I_Q10 (.C(C), 
               .CE(CE), 
               .D(D[10]), 
               .R(R), 
               .Q(Q[10]));
   FDRE #( .INIT(1'b0) ) I_Q11 (.C(C), 
               .CE(CE), 
               .D(D[11]), 
               .R(R), 
               .Q(Q[11]));
   FDRE #( .INIT(1'b0) ) I_Q12 (.C(C), 
               .CE(CE), 
               .D(D[12]), 
               .R(R), 
               .Q(Q[12]));
   FDRE #( .INIT(1'b0) ) I_Q13 (.C(C), 
               .CE(CE), 
               .D(D[13]), 
               .R(R), 
               .Q(Q[13]));
   FDRE #( .INIT(1'b0) ) I_Q14 (.C(C), 
               .CE(CE), 
               .D(D[14]), 
               .R(R), 
               .Q(Q[14]));
   FDRE #( .INIT(1'b0) ) I_Q15 (.C(C), 
               .CE(CE), 
               .D(D[15]), 
               .R(R), 
               .Q(Q[15]));
endmodule
`timescale 1ns / 1ps

module Processor_Integration_4(ALUcontrol, 
                               ALUOutWrite, 
                               Asel, 
                               Awrite, 
                               Bsel, 
                               Bwrite, 
                               Clock, 
                               Data_In, 
                               destAddr, 
                               destData, 
                               IR_Write, 
                               iszero_write, 
                               ItypeSel, 
                               Mwrite, 
                               M_Data_In, 
                               reg_write, 
                               A, 
                               Acc_Out, 
                               ALUOut_output, 
                               ALU_output, 
                               B, 
                               IR, 
                               isZero, 
                               overflow_out, 
                               write_Data);

    input [2:0] ALUcontrol;
    input ALUOutWrite;
    input Asel;
    input Awrite;
    input Bsel;
    input Bwrite;
    input Clock;
    input [15:0] Data_In;
    input [1:0] destAddr;
    input [2:0] destData;
    input IR_Write;
    input iszero_write;
    input ItypeSel;
    input Mwrite;
    input [15:0] M_Data_In;
    input reg_write;
   output [15:0] A;
   output [15:0] Acc_Out;
   output [15:0] ALUOut_output;
   output [15:0] ALU_output;
   output [15:0] B;
   output [15:0] IR;
   output isZero;
   output overflow_out;
   output [15:0] write_Data;
   
   wire [15:0] isZeroData;
   wire low;
   wire [15:0] M_out;
   wire [3:0] write_address;
   wire [15:0] XLXN_56;
   wire [15:0] XLXN_57;
   wire [15:0] XLXN_98;
   wire [15:0] XLXN_101;
   wire [15:0] XLXN_130;
   wire [15:0] XLXN_131;
   wire [3:0] XLXN_147;
   wire [15:0] XLXN_152;
   wire [15:0] XLXN_156;
   wire [15:0] XLXN_164;
   wire [3:0] XLXN_169;
   wire [15:0] XLXN_172;
   wire [15:0] IR_DUMMY;
   wire [15:0] ALU_output_DUMMY;
   wire [15:0] A_DUMMY;
   wire [15:0] B_DUMMY;
   wire isZero_DUMMY;
   wire [15:0] Acc_Out_DUMMY;
   wire [15:0] write_Data_DUMMY;
   wire [15:0] ALUOut_output_DUMMY;
   
   assign XLXN_147 = 4'hF;
   assign XLXN_169 = 4'h2;
   assign XLXN_172 = 16'h0004;
   assign A[15:0] = A_DUMMY[15:0];
   assign Acc_Out[15:0] = Acc_Out_DUMMY[15:0];
   assign ALUOut_output[15:0] = ALUOut_output_DUMMY[15:0];
   assign ALU_output[15:0] = ALU_output_DUMMY[15:0];
   assign B[15:0] = B_DUMMY[15:0];
   assign IR[15:0] = IR_DUMMY[15:0];
   assign isZero = isZero_DUMMY;
   assign write_Data[15:0] = write_Data_DUMMY[15:0];
   (* HU_SET = "XLXI_15_0" *) 
   FD16RE_MXILINX_Processor_Integration_4  XLXI_15 (.C(Clock), 
                                                   .CE(IR_Write), 
                                                   .D(Data_In[15:0]), 
                                                   .R(low), 
                                                   .Q(IR_DUMMY[15:0]));
   (* HU_SET = "XLXI_16_2" *) 
   FD16RE_MXILINX_Processor_Integration_4  XLXI_16 (.C(Clock), 
                                                   .CE(Awrite), 
                                                   .D(XLXN_130[15:0]), 
                                                   .R(low), 
                                                   .Q(A_DUMMY[15:0]));
   (* HU_SET = "XLXI_17_1" *) 
   FD16RE_MXILINX_Processor_Integration_4  XLXI_17 (.C(Clock), 
                                                   .CE(Bwrite), 
                                                   .D(XLXN_131[15:0]), 
                                                   .R(low), 
                                                   .Q(B_DUMMY[15:0]));
   Reg_File  XLXI_18 (.clock(Clock), 
                     .iszero_data(isZeroData[15:0]), 
                     .iszero_write(iszero_write), 
                     .ra(IR_DUMMY[11:8]), 
                     .reg_write(reg_write), 
                     .wa(write_address[3:0]), 
                     .write_data(write_Data_DUMMY[15:0]), 
                     .acc_data(Acc_Out_DUMMY[15:0]), 
                     .read_data(XLXN_98[15:0]));
   GND  XLXI_19 (.G(low));
   Mux_16bit_2i_1o  XLXI_25 (.a(XLXN_101[15:0]), 
                            .b(Acc_Out_DUMMY[15:0]), 
                            .s(Asel), 
                            .r(XLXN_130[15:0]));
   Mux_16bit_2i_1o  XLXI_26 (.a(XLXN_98[15:0]), 
                            .b(XLXN_164[15:0]), 
                            .s(Bsel), 
                            .r(XLXN_131[15:0]));
   Mux_16bit_2i_1o  XLXI_27 (.a(XLXN_56[15:0]), 
                            .b(XLXN_57[15:0]), 
                            .s(ItypeSel), 
                            .r(XLXN_164[15:0]));
   ZeroExtend_12bit  XLXI_28 (.a(IR_DUMMY[11:0]), 
                             .r(XLXN_56[15:0]));
   SignExtend_12bit  XLXI_29 (.a(IR_DUMMY[11:0]), 
                             .r(XLXN_57[15:0]));
   SignExtend_8bit  XLXI_30 (.a(IR_DUMMY[7:0]), 
                            .r(XLXN_101[15:0]));
   ALU_16bit  XLXI_56 (.a(A_DUMMY[15:0]), 
                      .ALUctrl(ALUcontrol[2:0]), 
                      .b(B_DUMMY[15:0]), 
                      .ALUOut(ALU_output_DUMMY[15:0]), 
                      .iszero(isZero_DUMMY), 
                      .Overflow(overflow_out));
   SignExtend_1bit  XLXI_57 (.a(isZero_DUMMY), 
                            .r(isZeroData[15:0]));
   (* HU_SET = "XLXI_58_3" *) 
   FD16RE_MXILINX_Processor_Integration_4  XLXI_58 (.C(Clock), 
                                                   .CE(ALUOutWrite), 
                                                   .D(ALU_output_DUMMY[15:0]), 
                                                   .R(low), 
                                                   
         .Q(ALUOut_output_DUMMY[15:0]));
   LeftShift_4  XLXI_63 (.a(XLXN_156[15:0]), 
                        .r(XLXN_152[15:0]));
   ZeroExtend_4bit  XLXI_64 (.a(IR_DUMMY[11:8]), 
                            .r(XLXN_156[15:0]));
   (* HU_SET = "XLXI_65_4" *) 
   FD16RE_MXILINX_Processor_Integration_4  XLXI_65 (.C(Clock), 
                                                   .CE(Mwrite), 
                                                   .D(M_Data_In[15:0]), 
                                                   .R(low), 
                                                   .Q(M_out[15:0]));
   Mux_4bit_3i_1o  XLXI_67 (.a(IR_DUMMY[11:8]), 
                           .b(XLXN_147[3:0]), 
                           .c(XLXN_169[3:0]), 
                           .s(destAddr[1:0]), 
                           .r(write_address[3:0]));
   Mux_16bit_6i_1o  XLXI_70 (.a(ALUOut_output_DUMMY[15:0]), 
                            .b(XLXN_152[15:0]), 
                            .c(B_DUMMY[15:0]), 
                            .d(A_DUMMY[15:0]), 
                            .e(M_out[15:0]), 
                            .f(XLXN_172[15:0]), 
                            .s(destData[2:0]), 
                            .r(write_Data_DUMMY[15:0]));
endmodule
